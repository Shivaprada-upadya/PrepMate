{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","tasks","setTasks","useState","newTask","setNewTask","title","week","day","editId","setEditId","darkMode","setDarkMode","fetchTasks","async","response","axios","get","data","useEffect","React","createElement","className","type","placeholder","value","onChange","e","target","min","parseInt","onClick","trim","put","completed","toast","success","warning","post","error","toggleDarkMode","prev","map","task","key","id","info","handleComplete","handleEdit","delete","handleDelete","ToastContainer","position","autoClose","Date","getFullYear","href","rel","FaGithub","style","marginRight","verticalAlign","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.af2024eb.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState({ title: \"\", week: 1, day: 1 });\n  const [editId, setEditId] = useState(null);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const fetchTasks = async () => {\n    const response = await axios.get(\"http://localhost:8080/api/tasks\");\n    setTasks(response.data);\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const handleAddTask = async () => {\n    if (!newTask.title.trim()) {\n      toast.warning(\"Please enter a task title\");\n      return;\n    }\n\n    try {\n      await axios.post(\"http://localhost:8080/api/tasks\", {\n        ...newTask,\n        completed: false,\n      });\n      toast.success(\"Task added!\");\n      setNewTask({ title: \"\", week: 1, day: 1 });\n      fetchTasks();\n    } catch {\n      toast.error(\"Failed to add task\");\n    }\n  };\n\n  const handleDelete = async (id) => {\n    await axios.delete(`http://localhost:8080/api/tasks/${id}`);\n    toast.error(\"Task deleted\");\n    fetchTasks();\n  };\n\n  const handleComplete = async (task) => {\n    await axios.put(`http://localhost:8080/api/tasks/${task.id}`, {\n      ...task,\n      completed: !task.completed,\n    });\n    toast.info(\"Task status updated\");\n    fetchTasks();\n  };\n\n  const handleEdit = (task) => {\n    setEditId(task.id);\n    setNewTask({ title: task.title, week: task.week, day: task.day });\n  };\n\n  const handleUpdate = async () => {\n    if (!newTask.title.trim()) {\n      toast.warning(\"Title cannot be empty\");\n      return;\n    }\n\n    await axios.put(`http://localhost:8080/api/tasks/${editId}`, {\n      ...newTask,\n      completed: false,\n    });\n\n    toast.success(\"Task updated\");\n    setEditId(null);\n    setNewTask({ title: \"\", week: 1, day: 1 });\n    fetchTasks();\n  };\n\n  const toggleDarkMode = () => setDarkMode((prev) => !prev);\n\n  return (\n      \n\n    <div className={darkMode ? \"app dark-mode\" : \"app\"}>\n      <h1>üöÄ Placement Prep Tracker</h1>\n      \n      <div className=\"form\">\n        <input\n          type=\"text\"\n          placeholder=\"Task title\"\n          value={newTask.title}\n          onChange={(e) =>\n            setNewTask({ ...newTask, title: e.target.value })\n          }\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Week\"\n          min=\"1\"\n          value={newTask.week}\n          onChange={(e) =>\n            setNewTask({ ...newTask, week: parseInt(e.target.value) })\n          }\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Day\"\n          min=\"1\"\n          value={newTask.day}\n          onChange={(e) =>\n            setNewTask({ ...newTask, day: parseInt(e.target.value) })\n          }\n        />\n        {editId ? (\n          <button onClick={handleUpdate}>Update</button>\n        ) : (\n          <button onClick={handleAddTask}>Add Task</button>\n        )}\n        <button className=\"dark-toggle\" onClick={toggleDarkMode}>\n          {darkMode ? \"‚òÄÔ∏è Light\" : \"üåô Dark\"}\n        </button>\n      </div>\n\n      <div className=\"task-list\">\n        {tasks.map((task) => (\n          <div\n            key={task.id}\n            className={`task ${task.completed ? \"completed\" : \"\"}`}\n          >\n            <h3>{task.title}</h3>\n            <p>\n              Week {task.week}, Day {task.day}\n            </p>\n            <div className=\"actions\">\n              <button onClick={() => handleComplete(task)}>\n                {task.completed ? \"Undo\" : \"Complete\"}\n              </button>\n              <button onClick={() => handleEdit(task)}>Edit</button>\n              <button onClick={() => handleDelete(task.id)}>Delete</button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <ToastContainer position=\"top-right\" autoClose={2000} />\n      <footer className=\"footer\">\n  <p>¬© {new Date().getFullYear()} <strong>Shivaprada Upadya</strong> ¬∑ All rights reserved.</p>\n  <p>\n    <a\n      href=\"https://github.com/shivaprada-upadya\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"github-link\"\n    >\n      <FaGithub style={{ marginRight: \"6px\", verticalAlign: \"middle\" }} />\n      Visit my GitHub Profile\n    </a>\n  </p>\n</footer>\n\n\n    </div>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}